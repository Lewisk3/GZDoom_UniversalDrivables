class VoxelTankBarrel : VehPart
{
	uint cooldown_primary;
	uint cooldown_secondary;
	Default
	{
		Scale 3.0;
	}
	
	override void UpdatePos(bool moving)
	{
		if(!base) return;
		let tank = VoxelTank(base);
		if(!tank) return;
		
		if(!tank.gun) 
		{
			Destroy();
			return;
		}
		SetOrigin(GetOffsetPos(tank.gun), moving);
		
		// Angle and Roll
		angle = tank.gun.angle;
		roll = tank.gun.roll;
		
		// Pitch
		double pitchoffs = 0;
		if(tank.driver) pitchoffs = tank.driver.pitch;
		double npitch = VehMath.Lerp(pitch, pitchoffs + tank.gun.pitch, 0.25);
		A_SetPitch(npitch, SPF_INTERPOLATE);
		pitch = clamp(pitch, -30, 10);
		
	}
	
	override void DoUpdate(VehCamera cam)
	{
		let tank = VoxelTank(base);
		if(cooldown_primary) 
		{
			cam.SetZoom(1.0, 0.1);
			cooldown_primary--;
		}
		if(cooldown_secondary) cooldown_secondary--;
		
		if( CheckButtons(BT_ATTACK, VehButtons.BTS_DOWN) && !cooldown_primary )
		{
			cooldown_primary = 35;
			let boolet = GetReplacement("Rocket");
			VehMath.FireProjectile(boolet, pos, angle, pitch, 0, 70, -4, 2, 16);
			A_StartSound("Tank/fire", CHAN_BODY, CHANF_OVERLAP);
			cam.SetZoom(0.90, 0.1);
			AnimatePos(-40, 0, 0);
			tank.throttle -= (abs(cos(tank.angle-angle)) * 0.5);
			// AnimateAngles(0, -8);
		}
		
		if( CheckButtons(BT_ALTATTACK, VehButtons.BTS_DOWN) && !cooldown_secondary )
		{
			cooldown_secondary = 2;
			double rmax = 1.5;
			double arecoil = frandom(-rmax, rmax);
			double precoil = frandom(-rmax, rmax);
			VehMath.FireProjectile("HaloMagnum_Bullet", pos, angle + arecoil, pitch + precoil, 20, 40, 6, 1, 200);
			A_StartSound("Halo/Weapons/Rifle/Fire", CHAN_BODY, CHANF_OVERLAP);
			cam.Quake(1.25,1.25,0,0.5);
		}
	}
	
	States
	{
		Spawn:
			TANK A 1;
		loop;
	}
}

class VoxelTankGun : VehPart
{
	VehPart aimpart;
	Default
	{
		Scale 3.0;
	}
	
	override void OnAttach()
	{
		vector3 reloffs = (32,0,12);
		aimpart = VehPart.Attach("VoxelTankBarrel", base, reloffs);
	}

	override void UpdatePos(bool moving)
	{
		super.UpdatePos(moving);
		let driver = base.driver;
		if(!driver) return;

		double nangle = VehMath.LerpAngle(angle, driver.angle, 0.035);
		A_SetAngle(nangle, SPF_INTERPOLATE);
	}
	
	States
	{
		Spawn:
			TANK A 1;
		loop;
	}
}

class TankCamera : VehCamera
{
	override void UpdatePos(bool moving)
	{
		if(!base) return;
		let tank = VoxelTank(base);
		vector3 finalpos = GetOffsetPos(tank.gun, relposoffs);
		SetOrigin(finalpos, moving);
		
		A_SetAngle(base.driver.angle, SPF_INTERPOLATE);
		A_SetPitch(base.driver.pitch - base.pitch, SPF_INTERPOLATE);
		A_SetRoll(base.roll, SPF_INTERPOLATE);
	}
	
}

class VoxelTank : VehBase
{
	VehPart gun;
	double turnvel;
	double throttle;
	
	Default
	{
		Radius 84;
		Height 64;
		Scale 3.0;
		+SOLID;
		+INTERPOLATEANGLES;
	}
		
	override void BeginPlay()
	{
		super.BeginPlay();
		gun = VehPart.Attach("VoxelTankGun", self, (0,0,50), (0,0));
		gun.angle += 180;
	}
	
	override void TakeDriver()
	{
		SetupCamera((30,10,20), (0,0), "TankCamera");
		driver.angle = gun.angle;
		ReadyDriver();
	}
	
	override vector3 GetDrivePos()
	{
		return (0,0,35);
	}
	
	override vector3 GetExitPos()
	{
		return ( cos(gun.angle + 90) * 90,
				 sin(gun.angle + 90) * 90, 0 );
	}

	override void DoMove(float forwardmove, float sidemove)
	{	
		bool onground = ((pos.z <= floorz) || bOnMobj || bMBFBouncer);
		double maxspd = 0.5;
		double tspd = 0.10;
		double turnspd = 0.13;
		double friction = 0.97;
		double decel = 0.97;
		
		if( (sidemove || forwardmove) && onground )
		{
			vector2 movedir = (-sidemove, forwardmove).Unit();
			if(movedir.x < 0) turnvel -= turnspd;
			if(movedir.x > 0) turnvel += turnspd;
			if(movedir.y > 0) throttle += tspd;
			if(movedir.y < 0) throttle -= tspd;
			throttle = clamp(throttle, -1.0, 1.0);
		}
		else
		{
			throttle *= decel;
			turnvel *= decel;
		}
		vector2 addvel = (
			cos(angle + 180) * maxspd,  
			sin(angle + 180) * maxspd
		) * throttle;
		vel.xy += addvel;
		
		if(onground) vel *= friction;
		turnvel *= friction;
		
		angle += turnvel;
		gun.angle += turnvel;
		if(driver) driver.angle += turnvel;
	}
	
	States
	{
		Spawn:
			TANK A 1;
		loop;
	}
}